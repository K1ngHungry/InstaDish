{"ast":null,"code":"class ApiService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || '/api';\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Recipe API methods\n  async getAllRecipes(filters = {}) {\n    const params = new URLSearchParams();\n    if (filters.category) params.append('category', filters.category);\n    if (filters.search) params.append('search', filters.search);\n    const queryString = params.toString();\n    const endpoint = queryString ? `/recipes?${queryString}` : '/recipes';\n    return this.request(endpoint);\n  }\n  async getRecipeById(id) {\n    return this.request(`/recipes/${id}`);\n  }\n  async searchRecipes(ingredients, limit = 10) {\n    return this.request('/recipes/search', {\n      method: 'POST',\n      body: JSON.stringify({\n        ingredients,\n        limit\n      })\n    });\n  }\n  async getRecipeCategories() {\n    return this.request('/recipes/categories');\n  }\n\n  // Chatbot API methods\n  async sendChatMessage(message, conversationHistory = [], userIngredients = []) {\n    return this.request('/chatbot', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        conversationHistory,\n        userIngredients\n      })\n    });\n  }\n  async getChatbotStatus() {\n    return this.request('/chatbot/status');\n  }\n  async getQuickQuestions(userIngredients = []) {\n    return this.request('/chatbot/quick-questions', {\n      method: 'POST',\n      body: JSON.stringify({\n        userIngredients\n      })\n    });\n  }\n\n  // Sustainability API methods\n  async analyzeRecipe(ingredients) {\n    return this.request('/sustainability/analyze', {\n      method: 'POST',\n      body: JSON.stringify({\n        ingredients\n      })\n    });\n  }\n  async getFoodWasteTips(ingredients = []) {\n    return this.request('/sustainability/food-waste-tips', {\n      method: 'POST',\n      body: JSON.stringify({\n        ingredients\n      })\n    });\n  }\n  async getSustainabilityScoringSystem() {\n    return this.request('/sustainability/scores');\n  }\n  async compareIngredients(ingredientSets) {\n    return this.request('/sustainability/compare', {\n      method: 'POST',\n      body: JSON.stringify({\n        ingredientSets\n      })\n    });\n  }\n\n  // Health check\n  async getHealthStatus() {\n    return this.request('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["ApiService","constructor","baseURL","process","env","REACT_APP_API_URL","request","endpoint","options","url","config","headers","response","fetch","ok","errorData","json","catch","Error","message","status","error","console","getAllRecipes","filters","params","URLSearchParams","category","append","search","queryString","toString","getRecipeById","id","searchRecipes","ingredients","limit","method","body","JSON","stringify","getRecipeCategories","sendChatMessage","conversationHistory","userIngredients","getChatbotStatus","getQuickQuestions","analyzeRecipe","getFoodWasteTips","getSustainabilityScoringSystem","compareIngredients","ingredientSets","getHealthStatus","apiService"],"sources":["/Users/kevin/InstaDish/frontend/src/services/api.js"],"sourcesContent":["class ApiService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || '/api';\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Recipe API methods\n  async getAllRecipes(filters = {}) {\n    const params = new URLSearchParams();\n    if (filters.category) params.append('category', filters.category);\n    if (filters.search) params.append('search', filters.search);\n    \n    const queryString = params.toString();\n    const endpoint = queryString ? `/recipes?${queryString}` : '/recipes';\n    return this.request(endpoint);\n  }\n\n  async getRecipeById(id) {\n    return this.request(`/recipes/${id}`);\n  }\n\n  async searchRecipes(ingredients, limit = 10) {\n    return this.request('/recipes/search', {\n      method: 'POST',\n      body: JSON.stringify({ ingredients, limit }),\n    });\n  }\n\n  async getRecipeCategories() {\n    return this.request('/recipes/categories');\n  }\n\n  // Chatbot API methods\n  async sendChatMessage(message, conversationHistory = [], userIngredients = []) {\n    return this.request('/chatbot', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        conversationHistory,\n        userIngredients,\n      }),\n    });\n  }\n\n  async getChatbotStatus() {\n    return this.request('/chatbot/status');\n  }\n\n  async getQuickQuestions(userIngredients = []) {\n    return this.request('/chatbot/quick-questions', {\n      method: 'POST',\n      body: JSON.stringify({ userIngredients }),\n    });\n  }\n\n  // Sustainability API methods\n  async analyzeRecipe(ingredients) {\n    return this.request('/sustainability/analyze', {\n      method: 'POST',\n      body: JSON.stringify({ ingredients }),\n    });\n  }\n\n  async getFoodWasteTips(ingredients = []) {\n    return this.request('/sustainability/food-waste-tips', {\n      method: 'POST',\n      body: JSON.stringify({ ingredients }),\n    });\n  }\n\n  async getSustainabilityScoringSystem() {\n    return this.request('/sustainability/scores');\n  }\n\n  async compareIngredients(ingredientSets) {\n    return this.request('/sustainability/compare', {\n      method: 'POST',\n      body: JSON.stringify({ ingredientSets }),\n    });\n  }\n\n  // Health check\n  async getHealthStatus() {\n    return this.request('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst apiService = new ApiService();\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}