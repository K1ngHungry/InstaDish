{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/InstaDish/frontend/src/components/chatbot/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = ({\n  onRecipeClick,\n  selectedIngredients = []\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [messages, setMessages] = React.useState([{\n    id: 1,\n    text: selectedIngredients.length > 0 ? `Hi! I'm your InstaDish cooking assistant! 🍳 I can see you have ${selectedIngredients.length} ingredients selected: ${selectedIngredients.join(', ')}. I can help you with:\\n\\n• Recipe suggestions using your ingredients\\n• Cooking techniques and tips\\n• Ingredient substitutions\\n• Sustainability advice\\n\\nWhat would you like to know?` : \"Hi! I'm your InstaDish cooking assistant! 🍳 I can help you with:\\n\\n• Cooking techniques and tips\\n• Ingredient substitutions\\n• Sustainability advice\\n• Recipe suggestions\\n\\nFirst, add some ingredients to get personalized recipe recommendations!\",\n    sender: 'bot',\n    timestamp: new Date(),\n    recipes: []\n  }]);\n  const [inputValue, setInputValue] = React.useState('');\n  const [isTyping, setIsTyping] = React.useState(false);\n  const messagesEndRef = React.useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Update welcome message when ingredients change\n  React.useEffect(() => {\n    if (selectedIngredients.length > 0 && messages.length === 1) {\n      setMessages([{\n        id: 1,\n        text: `Hi! I'm your InstaDish cooking assistant! 🍳 I can see you have ${selectedIngredients.length} ingredients selected: ${selectedIngredients.join(', ')}. I can help you with:\\n\\n• Recipe suggestions using your ingredients\\n• Cooking techniques and tips\\n• Ingredient substitutions\\n• Sustainability advice\\n\\nWhat would you like to know?`,\n        sender: 'bot',\n        timestamp: new Date(),\n        recipes: []\n      }]);\n    }\n  }, [selectedIngredients]);\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isTyping) return;\n    const userMessage = {\n      id: Date.now(),\n      text: inputValue.trim(),\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsTyping(true);\n    try {\n      const response = await fetch('/api/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: inputValue.trim(),\n          conversationHistory: messages,\n          userIngredients: selectedIngredients\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get response from chatbot');\n      }\n      const data = await response.json();\n      const botMessage = {\n        id: Date.now() + 1,\n        text: data.response || \"I'm sorry, I couldn't generate a response right now.\",\n        sender: 'bot',\n        timestamp: new Date(),\n        recipes: data.recipes || []\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error:', error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: \"I'm having trouble connecting right now. Please try again later!\",\n        sender: 'bot',\n        timestamp: new Date(),\n        recipes: []\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const formatTime = timestamp => {\n    return timestamp.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n  const getQuickQuestions = () => {\n    if (selectedIngredients.length > 0) {\n      return [\"What recipes can I make with my ingredients?\", \"How can I make my meal more sustainable?\", \"What substitutions can I make?\", \"What's missing from my ingredients?\"];\n    }\n    return [\"How do I know when chicken is cooked?\", \"What can I substitute for eggs?\", \"How do I reduce food waste?\", \"What's the most sustainable protein?\"];\n  };\n  const handleQuickQuestion = question => {\n    setInputValue(question);\n    // Auto-send after setting the value\n    setTimeout(() => {\n      handleSendMessage();\n    }, 100);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chatbot-toggle ${isOpen ? 'open' : ''}`,\n      onClick: toggleChat,\n      \"aria-label\": \"Toggle chatbot\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chat-icon\",\n        children: \"\\uD83C\\uDF73\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), !isOpen && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chat-badge\",\n        children: \"\\uD83D\\uDCA1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bot-avatar\",\n            children: \"\\uD83D\\uDC68\\u200D\\uD83C\\uDF73\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"InstaDish AI Assistant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Powered by llama2:7b\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-chat\",\n          onClick: () => setIsOpen(false),\n          \"aria-label\": \"Close chat\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              style: {\n                whiteSpace: 'pre-line'\n              },\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this), message.recipes && message.recipes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"recipe-suggestions\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Here are some recipes I found:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 23\n              }, this), message.recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"recipe-suggestion\",\n                onClick: () => onRecipeClick(recipe.id),\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"recipe-suggestion-title\",\n                  children: recipe.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"recipe-suggestion-match\",\n                  children: [recipe.match.percentage, \"% match (\", recipe.match.matches, \"/\", recipe.match.total, \" ingredients)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 27\n                }, this)]\n              }, recipe.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 25\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-time\",\n              children: formatTime(message.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-questions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Quick Questions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quick-question-buttons\",\n          children: getQuickQuestions().map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"quick-question-btn\",\n            onClick: () => handleQuickQuestion(question),\n            disabled: isTyping,\n            children: question\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: selectedIngredients.length > 0 ? `Ask about recipes with ${selectedIngredients.join(', ')}, substitutions, or cooking tips...` : \"Ask about cooking, sustainability, or ingredients...\",\n          className: \"chat-input\",\n          disabled: isTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputValue.trim() || isTyping,\n          className: \"send-button\",\n          children: isTyping ? '...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"y1HAjn4cb1i0X2TLq7DiAYnkoPw=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","onRecipeClick","selectedIngredients","_s","isOpen","setIsOpen","useState","messages","setMessages","id","text","length","join","sender","timestamp","Date","recipes","inputValue","setInputValue","isTyping","setIsTyping","messagesEndRef","useRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","useEffect","handleSendMessage","trim","userMessage","now","prev","response","fetch","method","headers","body","JSON","stringify","message","conversationHistory","userIngredients","ok","Error","data","json","botMessage","error","console","errorMessage","handleKeyPress","e","key","shiftKey","preventDefault","formatTime","toLocaleTimeString","hour","minute","toggleChat","getQuickQuestions","handleQuickQuestion","question","setTimeout","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","style","whiteSpace","recipe","title","match","percentage","matches","total","ref","index","disabled","type","value","onChange","target","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["/Users/kevin/InstaDish/frontend/src/components/chatbot/Chatbot.js"],"sourcesContent":["import React from 'react';\n\nconst Chatbot = ({ onRecipeClick, selectedIngredients = [] }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [messages, setMessages] = React.useState([\n    {\n      id: 1,\n      text: selectedIngredients.length > 0 \n        ? `Hi! I'm your InstaDish cooking assistant! 🍳 I can see you have ${selectedIngredients.length} ingredients selected: ${selectedIngredients.join(', ')}. I can help you with:\\n\\n• Recipe suggestions using your ingredients\\n• Cooking techniques and tips\\n• Ingredient substitutions\\n• Sustainability advice\\n\\nWhat would you like to know?`\n        : \"Hi! I'm your InstaDish cooking assistant! 🍳 I can help you with:\\n\\n• Cooking techniques and tips\\n• Ingredient substitutions\\n• Sustainability advice\\n• Recipe suggestions\\n\\nFirst, add some ingredients to get personalized recipe recommendations!\",\n      sender: 'bot',\n      timestamp: new Date(),\n      recipes: []\n    }\n  ]);\n  const [inputValue, setInputValue] = React.useState('');\n  const [isTyping, setIsTyping] = React.useState(false);\n  const messagesEndRef = React.useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Update welcome message when ingredients change\n  React.useEffect(() => {\n    if (selectedIngredients.length > 0 && messages.length === 1) {\n      setMessages([{\n        id: 1,\n        text: `Hi! I'm your InstaDish cooking assistant! 🍳 I can see you have ${selectedIngredients.length} ingredients selected: ${selectedIngredients.join(', ')}. I can help you with:\\n\\n• Recipe suggestions using your ingredients\\n• Cooking techniques and tips\\n• Ingredient substitutions\\n• Sustainability advice\\n\\nWhat would you like to know?`,\n        sender: 'bot',\n        timestamp: new Date(),\n        recipes: []\n      }]);\n    }\n  }, [selectedIngredients]);\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isTyping) return;\n\n    const userMessage = {\n      id: Date.now(),\n      text: inputValue.trim(),\n      sender: 'user',\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsTyping(true);\n\n    try {\n      const response = await fetch('/api/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: inputValue.trim(),\n          conversationHistory: messages,\n          userIngredients: selectedIngredients\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get response from chatbot');\n      }\n\n      const data = await response.json();\n      \n      const botMessage = {\n        id: Date.now() + 1,\n        text: data.response || \"I'm sorry, I couldn't generate a response right now.\",\n        sender: 'bot',\n        timestamp: new Date(),\n        recipes: data.recipes || []\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error:', error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: \"I'm having trouble connecting right now. Please try again later!\",\n        sender: 'bot',\n        timestamp: new Date(),\n        recipes: []\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (timestamp) => {\n    return timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const getQuickQuestions = () => {\n    if (selectedIngredients.length > 0) {\n      return [\n        \"What recipes can I make with my ingredients?\",\n        \"How can I make my meal more sustainable?\",\n        \"What substitutions can I make?\",\n        \"What's missing from my ingredients?\"\n      ];\n    }\n    return [\n      \"How do I know when chicken is cooked?\",\n      \"What can I substitute for eggs?\",\n      \"How do I reduce food waste?\",\n      \"What's the most sustainable protein?\"\n    ];\n  };\n\n  const handleQuickQuestion = (question) => {\n    setInputValue(question);\n    // Auto-send after setting the value\n    setTimeout(() => {\n      handleSendMessage();\n    }, 100);\n  };\n\n  return (\n    <>\n      {/* Chat Toggle Button */}\n      <button \n        className={`chatbot-toggle ${isOpen ? 'open' : ''}`}\n        onClick={toggleChat}\n        aria-label=\"Toggle chatbot\"\n      >\n        <span className=\"chat-icon\">🍳</span>\n        {!isOpen && <span className=\"chat-badge\">💡</span>}\n      </button>\n\n      {/* Chat Window */}\n      {isOpen && (\n        <div className=\"chatbot-container\">\n          <div className=\"chatbot-header\">\n            <div className=\"chatbot-title\">\n              <span className=\"bot-avatar\">👨‍🍳</span>\n              <div>\n                <h3>InstaDish AI Assistant</h3>\n                <p>Powered by llama2:7b</p>\n              </div>\n            </div>\n            <button \n              className=\"close-chat\"\n              onClick={() => setIsOpen(false)}\n              aria-label=\"Close chat\"\n            >\n              ×\n            </button>\n          </div>\n\n          <div className=\"chatbot-messages\">\n            {messages.map((message) => (\n              <div key={message.id} className={`message ${message.sender}`}>\n                <div className=\"message-content\">\n                  <div className=\"message-text\" style={{ whiteSpace: 'pre-line' }}>\n                    {message.text}\n                  </div>\n                  {message.recipes && message.recipes.length > 0 && (\n                    <div className=\"recipe-suggestions\">\n                      <h4>Here are some recipes I found:</h4>\n                      {message.recipes.map((recipe) => (\n                        <div \n                          key={recipe.id} \n                          className=\"recipe-suggestion\"\n                          onClick={() => onRecipeClick(recipe.id)}\n                        >\n                          <div className=\"recipe-suggestion-title\">{recipe.title}</div>\n                          <div className=\"recipe-suggestion-match\">\n                            {recipe.match.percentage}% match ({recipe.match.matches}/{recipe.match.total} ingredients)\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                  <div className=\"message-time\">{formatTime(message.timestamp)}</div>\n                </div>\n              </div>\n            ))}\n            \n            {isTyping && (\n              <div className=\"message bot\">\n                <div className=\"message-content\">\n                  <div className=\"typing-indicator\">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Quick Questions */}\n          <div className=\"quick-questions\">\n            <h4>Quick Questions:</h4>\n            <div className=\"quick-question-buttons\">\n              {getQuickQuestions().map((question, index) => (\n                <button\n                  key={index}\n                  className=\"quick-question-btn\"\n                  onClick={() => handleQuickQuestion(question)}\n                  disabled={isTyping}\n                >\n                  {question}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"chatbot-input\">\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={selectedIngredients.length > 0 \n                ? `Ask about recipes with ${selectedIngredients.join(', ')}, substitutions, or cooking tips...`\n                : \"Ask about cooking, sustainability, or ingredients...\"\n              }\n              className=\"chat-input\"\n              disabled={isTyping}\n            />\n            <button \n              onClick={handleSendMessage}\n              disabled={!inputValue.trim() || isTyping}\n              className=\"send-button\"\n            >\n              {isTyping ? '...' : 'Send'}\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}